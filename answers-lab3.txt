1. What is the purpose of having an individual handler function
for each exception/interrupt? (i.e., if all exceptions/interrupts
were delivered to the same handler, what feature that exists in
the current implementation could not be provided?)

This allows us to enable or disable a separate interrupts in the user mode.

2. Did you have to do anything to make the user/softint program
behave correctly? The grade script expects it to produce a general
protection fault (trap 13), but softint’s code says int $14. Why
should this produce interrupt vector 13? What happens if the kernel
actually allows softint’s int $14 instruction to invoke the kernel’s
page fault handler (which is interrupt vector 14)?

Since this interrupt is available only from the kernel
(we did this in file trap.c), when this interrupt is initiated from the user,
the processor will automatically trigger a general protection fault (trap 13).
If the user was allowed to do that, then it could just kill the OS,
since interrupt 14 would cause the OS to panic and stop.

3. The break point test case will either generate a break point
exception or a general protection fault depending on how you
initialized the break point entry in the IDT (i.e., your call to
SETGATE from trap_init). Why? How do you need to set it up in order
to get the breakpoint exception to work as specified above and what
incorrect setup would cause it to trigger a general protection fault?

We can either enable or disable this interrupt from user mode.
Correct Setup:
    SETGATE(idt[T_BRKPT], 0, GD_KT, t_brkpt, 3); // allow user mode
Incorrect Setup:
    SETGATE(idt[T_BRKPT], 0, GD_KT, t_brkpt, 0); // disallow user mode

4. What do you think is the point of these mechanisms, particularly
in light of what the user/softint test program does?

I think that the sense of these mechanisms is to protect the kernel
from user intervention - the user is allowed only some interrupts,
such as breakpoints and system calls.
